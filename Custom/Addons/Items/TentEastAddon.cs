/////////////////////////////////////////////////
//                                             //
// Automatically generated by the              //
// AddonGenerator script by Arya               //
//                                             //
/////////////////////////////////////////////////
using System;
using Server;
using Server.Items;
using Server.Mobiles;

namespace Server.Items
{
	public class TentEastAddon : BaseAddon
	{
		public Timer m_InUse;
		private Mobile m_Owner;
		private Container m_Box;
		private Item m_Bedroll;
		
		[CommandProperty( AccessLevel.GameMaster )]
		public Mobile Owner
		{
			set{ m_Owner = value; }
			get{ return m_Owner; }
		}
		
		[CommandProperty( AccessLevel.GameMaster )]
		public Container Box
		{
			set{ m_Box = value; }
			get{ return m_Box; }
		}
		
		[CommandProperty( AccessLevel.GameMaster )]
		public Item Bedroll
		{
			set{ m_Bedroll = value; }
			get{ return m_Bedroll; }
		}

		[ Constructable ]
		public TentEastAddon( Mobile from )
		{
			this.Owner = from;
			AddonComponent ac;
			ac = new AddonComponent( 734 );
			AddComponent( ac, 3, 3, 0 );
			ac = new AddonComponent( 735 );
			AddComponent( ac, 2, 3, 0 );
			ac = new AddonComponent( 736 );
			AddComponent( ac, 3, 2, 0 );
			ac = new AddonComponent( 739 );
			AddComponent( ac, 3, -2, 0 );
			ac = new AddonComponent( 740 );
			AddComponent( ac, 2, -2, 0 );
			ac = new AddonComponent( 743 );
			AddComponent( ac, 1, -2, 0 );
			ac = new AddonComponent( 743 );
			AddComponent( ac, -1, -2, 0 );
			ac = new AddonComponent( 737 );
			AddComponent( ac, -2, -2, 0 );
			ac = new AddonComponent( 742 );
			AddComponent( ac, -2, -1, 0 );
			ac = new AddonComponent( 742 );
			AddComponent( ac, -2, 0, 0 );
			ac = new AddonComponent( 742 );
			AddComponent( ac, -2, 1, 0 );
			ac = new AddonComponent( 1635 );
			ac.Hue = 1341;
			AddComponent( ac, 3, 3, 25 );
			ac = new AddonComponent( 1633 );
			ac.Hue = 1341;
			AddComponent( ac, 3, 1, 25 );
			ac = new AddonComponent( 1632 );
			ac.Hue = 1341;
			AddComponent( ac, 1, 3, 25 );
			ac = new AddonComponent( 1630 );
			ac.Hue = 1341;
			AddComponent( ac, 0, 1, 25 );
			ac = new AddonComponent( 1631 );
			ac.Hue = 1341;
			AddComponent( ac, 1, 0, 25 );
			ac = new AddonComponent( 1636 );
			ac.Hue = 1341;
			AddComponent( ac, 3, 0, 25 );
			ac = new AddonComponent( 1637 );
			ac.Hue = 1341;
			AddComponent( ac, 0, 0, 25 );
			ac = new AddonComponent( 1638 );
			ac.Hue = 1341;
			AddComponent( ac, 0, 3, 25 );
			ac = new AddonComponent( 743 );
			AddComponent( ac, 0, -2, 0 );
			ac = new AddonComponent( 742 );
			AddComponent( ac, -2, 2, 0 );
			ac = new AddonComponent( 736 );
			AddComponent( ac, 3, -1, 0 );
			ac = new AddonComponent( 735 );
			AddComponent( ac, -1, 3, 0 );
			ac = new AddonComponent( 738 );
			AddComponent( ac, -2, 3, 0 );
			ac = new AddonComponent( 1633 );
			ac.Hue = 1341;
			AddComponent( ac, 3, 2, 25 );
			ac = new AddonComponent( 1632 );
			ac.Hue = 1341;
			AddComponent( ac, 2, 3, 25 );
			ac = new AddonComponent( 1630 );
			ac.Hue = 1341;
			AddComponent( ac, 0, 2, 25 );
			ac = new AddonComponent( 1631 );
			ac.Hue = 1341;
			AddComponent( ac, 2, 0, 25 );
			ac = new AddonComponent( 1635 );
			ac.Hue = 1341;
			AddComponent( ac, 2, 2, 28 );
			ac = new AddonComponent( 1636 );
			ac.Hue = 1341;
			AddComponent( ac, 2, 1, 28 );
			ac = new AddonComponent( 1637 );
			ac.Hue = 1341;
			AddComponent( ac, 1, 1, 28 );
			ac = new AddonComponent( 1638 );
			ac.Hue = 1341;
			AddComponent( ac, 1, 2, 28 );
			ac = new AddonComponent( 735 );
			AddComponent( ac, 0, 3, 0 );
			ac = new AddonComponent( 735 );
			AddComponent( ac, 1, 3, 0 );
			ac = new AddonComponent( 4012 );
			ac.Light = LightType.Circle150;
			AddComponent( ac, 5, 1, 0 );

			uint keyvalue = Convert.ToUInt32( 2 * Utility.RandomMinMax( 1, 4999 ) );
			WoodenBox pack = new WoodenBox();
			pack.MoveToWorld( this.Owner.Location );
			pack.Map = this.Owner.Map;
			pack.X -= 1;
			pack.Y -= 1;
			pack.Movable = false;
			pack.KeyValue = keyvalue;
			pack.LockLevel = 95;
			pack.RequiredSkill = 95;
			pack.ItemID = 0xE7D;
			
			Key key = new Key();
			key.KeyValue = keyvalue;
			pack.DropItem( key );
			this.Box = pack;
			
			Bedroll bedroll = new Bedroll();
			bedroll.MoveToWorld( this.Owner.Location );
			bedroll.Map = this.Owner.Map;
			bedroll.X += 1;
			bedroll.Z -= 1;
			bedroll.ItemID = 0xA55;
			bedroll.Movable = false;
			this.Bedroll = bedroll;
		}
		
		public override void OnDelete()
		{
			if( this.Box != null && !this.Box.Deleted )
				this.Box.Delete();
			
			if( this.Bedroll != null && !this.Bedroll.Deleted )
				this.Bedroll.Delete();
			
			if( this.Owner != null && this.Owner is PlayerMobile && ((PlayerMobile)this.Owner).Tents.Contains(this) )
				((PlayerMobile)this.Owner).Tents.Remove( this );
			
			base.OnDelete();
		}
		
		public override void OnComponentUsed( AddonComponent c, Mobile from )
		{
			if( this.m_InUse != null )
				return;
			
			if( this.Owner == from )
			{
				if( !from.InRange( c, 2 ) )
			   	{
				   	from.SendMessage( "You are too far away." );
				   	return;
			  	}
				   
				if( this.Box == null || this.Box.Deleted || ( this.Box != null && this.Box.GetAmount( typeof( Item ) ) == 1 ) )
				{
					if( this.Box == null || this.Box.Deleted || this.Box.GetAmount( typeof( Key ) ) == 1 )
					{
						this.m_InUse = new PutAwayTentTimer( from, this );
						this.m_InUse.Start();
					}
					
					else
						from.SendMessage( "You need to empty the tent's wooden box and leave a key inside it first." );
				}
				
				else
					from.SendMessage( "You need to empty the tent's wooden box and place its key inside first." );
			}
			
			else
			{
				from.SendMessage( "You are not this tent's owner." );
			}
		}

		public TentEastAddon( Serial serial ) : base( serial )
		{
		}

		public override void Serialize( GenericWriter writer )
		{
			base.Serialize( writer );
			writer.Write( 1 ); // Version
			
			writer.Write( (Mobile) m_Owner );
			writer.Write( (Container) m_Box );
			writer.Write( (Item) m_Bedroll );
		}

		public override void Deserialize( GenericReader reader )
		{
			base.Deserialize( reader );
			int version = reader.ReadInt();
			
			if( version > 0 )
			{
				m_Owner = reader.ReadMobile();
				m_Box = (Container)reader.ReadItem();
				m_Bedroll = reader.ReadItem();
			}
		}
	}

	public class TentPackEast : Item
	{
		public Timer m_InUse;

		[Constructable]
		public TentPackEast() : base( 0xE75 )
		{
			Name = "Tent Pack (East)";
			Weight = 200;
		}

		public TentPackEast( Serial serial ) : base( serial )
		{
		}
		
		public override void OnDoubleClick( Mobile from )
		{
			if( !this.IsChildOf( from ) )
			{
				from.SendMessage( "This must be in your backpack for you to use it." );
				return;
			}
			
			if( from != null && !from.Deleted && from.Alive && !from.Paralyzed && !from.Frozen )
			{
				if( this.m_InUse != null )
					return;
					
				if( from.Skills[SkillName.Camping].Fixed == 1000 )
				{
					this.m_InUse = new PitchTentTimer( from, this );
					this.m_InUse.Start();
				}
				
				else
					from.SendMessage( "You need 100% in your Camping Skill to attempt that." );
			}
		}

		public override void Serialize( GenericWriter writer )
		{
			base.Serialize( writer );
			writer.Write( 0 ); // Version
		}

		public override void Deserialize( GenericReader reader )
		{
			base.Deserialize( reader );
			int version = reader.ReadInt();
		}
	}
	
	public class PitchTentTimer : Timer
    {
        private Mobile m_m;
        private Item m_tent;
        private Point3D m_loc;

        public PitchTentTimer( Mobile m, Item tent )
        	: base( TimeSpan.FromSeconds( 10 ) )
        {
            m_m = m;
            m_tent = tent;
            m.Emote( "*starts pitching a tent*" );
            m_loc = m.Location;
            m_tent.Movable = false;
        }

        protected override void OnTick()
        {
            if( m_m != null && !m_m.Deleted && m_loc == m_m.Location && m_m.Alive )
            {
                m_m.SendMessage( "You pitched the tent." );
                
                if( m_tent is TentPackEast )
                {
                	TentEastAddon tent = new TentEastAddon( m_m );
					tent.MoveToWorld( m_m.Location );
					tent.Map = m_m.Map;
					
					if( m_m is PlayerMobile )
                		((PlayerMobile)m_m).Tents.Add( tent );
                }
				
                if( m_tent is TentPackSouth )
                {
                	TentSouthAddon tent = new TentSouthAddon( m_m );
					tent.MoveToWorld( m_m.Location );
					tent.Map = m_m.Map;
					
					if( m_m is PlayerMobile )
                		((PlayerMobile)m_m).Tents.Add( tent );
                }

				m_tent.Delete();
            }

            else
            {
                m_m.SendMessage( "You failed to pitch the tent." );
                m_tent.Movable = true;
                
                if( m_tent is TentPackEast )
                	( (TentPackEast)m_tent ).m_InUse = null;
                
                if( m_tent is TentPackSouth )
                	( (TentPackSouth)m_tent ).m_InUse = null;
            }
        }
    }
	
	public class PutAwayTentTimer : Timer
    {
        private Mobile m_m;
        private Item m_tent;
        private Point3D m_loc;

        public PutAwayTentTimer( Mobile m, Item tent )
        	: base( TimeSpan.FromSeconds( 10 ) )
        {
            m_m = m;
            m_tent = tent;
            m.Emote( "*starts dismounting a tent*" );
            m_loc = m.Location;
        }

        protected override void OnTick()
        {
        	if( m_m != null && !m_m.Deleted && m_tent != null && !m_tent.Deleted && m_loc == m_m.Location && m_m.Alive )
            {
				if( m_tent is TentEastAddon )
                {
					TentEastAddon tent = m_tent as TentEastAddon;
					
					if( tent.Box == null || tent.Box.Deleted || ( tent.Box != null && tent.Box.GetAmount( typeof( Item ) ) == 1 && tent.Box.GetAmount( typeof( Key ) ) == 1 ) )
					{
	                	TentPackEast tentpack = new TentPackEast();
	                	m_m.Backpack.DropItem( tentpack );
	                	
	                	if( tent.Box != null && !tent.Box.Deleted )
	                		tent.Box.Delete();
	                	
	                	if( tent.Bedroll != null && !tent.Bedroll.Deleted )
	                		tent.Bedroll.Delete();
	                	
						m_tent.Delete();
						m_m.SendMessage( "You dismounted the tent." );
					}
					
					else
						m_m.SendMessage( "You need to empty the tent's wooden box and place its key inside first." );
                }
				
				if( m_tent is TentSouthAddon )
                {
					TentSouthAddon tent = m_tent as TentSouthAddon;
					
                	if( tent.Box == null || tent.Box.Deleted || ( tent.Box != null && tent.Box.GetAmount( typeof( Item ) ) == 1 && tent.Box.GetAmount( typeof( Key ) ) == 1 ) )
					{
	                	TentPackSouth tentpack = new TentPackSouth();
	                	m_m.Backpack.DropItem( tentpack );
	                	
	                	if( tent.Box != null && !tent.Box.Deleted )
	                		tent.Box.Delete();
	                	
	                	if( tent.Bedroll != null && !tent.Bedroll.Deleted )
	                		tent.Bedroll.Delete();
	                	
						m_tent.Delete();
						m_m.SendMessage( "You dismounted the tent." );
					}
                	
                	else
						m_m.SendMessage( "You need to empty the tent's wooden box and leave a key inside it first." );
                }
            }

            else
            {
            	if( m_m != null && !m_m.Deleted )
                	m_m.SendMessage( "You failed to dismount the tent." );
                
                if( m_tent != null && !m_tent.Deleted && m_tent is TentEastAddon )
                	( (TentEastAddon)m_tent ).m_InUse = null;
                
                if( m_tent != null && !m_tent.Deleted && m_tent is TentSouthAddon )
                	( (TentSouthAddon)m_tent ).m_InUse = null;
            }
        }
    } 
}
